#include "mbed.h"
#include "nRF24L01P.h"

Serial pc(USBTX, USBRX); // tx, rx

nRF24L01P my_nrf24l01p(PTD2, PTD3, PTC5, PTD0, PTD5, PTA13);    // mosi, miso, sck, csn, ce, irq

DigitalOut myled1(LED1);
DigitalOut myled2(LED2);
PwmOut ativa1(PTC1);
PwmOut ativa2(PTC2);
DigitalOut in1(PTA12);
DigitalOut in2(PTD4);
DigitalOut in3(PTA4);
DigitalOut in4(PTA5);
DigitalIn in5(PTB8);
DigitalOut in6(PTB9);

InterruptIn encoder1(PTA17);
InterruptIn encoder2(PTA16);

Ticker flipper;

int voltas = 0;

void conta(){
    myled1=!myled1;
}

void conta2(){
    myled2=!myled2;
}
    

void escreve(){
  //  encoder1.rise(NULL);
    char valor[2] = {'U','I'};
    my_nrf24l01p.write(NRF24L01P_PIPE_P0,valor,2);
 //   voltas=0;
  //  encoder1.rise(&conta);
}


int main() {

// The nRF24L01+ supports transfers from 1 to 32 bytes, but Sparkfun's
//  "Nordic Serial Interface Board" (http://www.sparkfun.com/products/9019)
//  only handles 4 byte transfers in the ATMega code.
#define TRANSFER_SIZE   2

    in1 = 0;
    in2 = 0;
    ativa1.period(0.025f);
    ativa1.write(0.25f);
    ativa2.period(0.025f);
    ativa2.write(0.45f); 
    char txData[TRANSFER_SIZE], rxData[TRANSFER_SIZE];
    int txDataCnt = 0;
    int rxDataCnt = 0;
    
    encoder1.rise(&conta);
    encoder2.rise(&conta2);
    my_nrf24l01p.powerUp();
    flipper.attach(&escreve,3.0);
    
    // Display the (default) setup of the nRF24L01+ chip
    my_nrf24l01p.setRfFrequency(2472);
    pc.printf( "nRF24L01+ Frequency    : %d MHz\r\n",  my_nrf24l01p.getRfFrequency() );
    pc.printf( "nRF24L01+ Output power : %d dBm\r\n",  my_nrf24l01p.getRfOutputPower() );
    pc.printf( "nRF24L01+ Data Rate    : %d kbps\r\n", my_nrf24l01p.getAirDataRate() );
    pc.printf( "nRF24L01+ TX Address   : 0x%010llX\r\n", my_nrf24l01p.getTxAddress() );
    pc.printf( "nRF24L01+ RX Address   : 0x%010llX\r\n", my_nrf24l01p.getRxAddress() );

    pc.printf( "Type keys to test transfers:\r\n  (transfers are grouped into %d characters)\r\n", TRANSFER_SIZE );

    my_nrf24l01p.setTransferSize( TRANSFER_SIZE );

    my_nrf24l01p.setReceiveMode();
    my_nrf24l01p.enable();


    while (1) {

        // If we've received anything over the host serial link...
        if ( pc.readable() ) {

            // ...add it to the transmit buffer
            txData[txDataCnt++] = pc.getc();

            // If the transmit buffer is full
            if ( txDataCnt >= sizeof( txData ) ) {

                // Send the transmitbuffer via the nRF24L01+
                my_nrf24l01p.write( NRF24L01P_PIPE_P0, txData, txDataCnt );

                txDataCnt = 0;
            }

            // Toggle LED1 (to help debug Host -> nRF24L01+ communication)
            //myled1 = !myled1;
        }

        // If we've received anything in the nRF24L01+...
        /*if ( my_nrf24l01p.readable() ) {

            // ...read the data into the receive buffer
            rxDataCnt = my_nrf24l01p.read( NRF24L01P_PIPE_P0, rxData, sizeof( rxData ) );
            
            if(rxData[0] == 'q' && rxData[1] == 'w'){
               in1 = 1;
               in2 = 0;
               in3 = 0;
               in4 = 0;
               myled1 = 1;
               myled2 = 0;
            } else if(rxData[0] == 'e' && rxData[1] =='r'){
                in1 = 0;
                in2 = 0;
                in3 = 1;
                in4 = 0;
               myled1 = 0;
               myled2 = 1;
            } else if(rxData[0] == 't' && rxData[1] == 'y'){
             in1 = 1;
             in2 = 0;
             in3 = 1;
             in4 = 0;
            myled1 = 0;
            myled2 = 0;
            } else{
                myled1=1;
                myled2=1;
                in1=0;
                in2=0;
                in3=0;
                in4=0;
            }

            // Display the receive buffer contents via the host serial link
            for ( int i = 0; rxDataCnt > 0; rxDataCnt--, i++ ) {

                pc.putc( rxData[i] );
            }

            // Toggle LED2 (to help debug nRF24L01+ -> Host communication)
            //myled2 = !myled2;
        }*/
    }
}
